import { CfnOutput } from "aws-cdk-lib";
import {
  Cors,
  JsonSchemaType,
  LambdaIntegration,
  LambdaRestApi,
  Model,
  RequestValidator,
} from "aws-cdk-lib/aws-apigateway";
import { IFunction } from "aws-cdk-lib/aws-lambda";
import { Construct } from "constructs";

interface CustomApiGatewayProps {
  productMicroservice: IFunction;
  basketMicroservice: IFunction;
  orderingMicroservices: IFunction;
}

export class CustomApiGateway extends Construct {
  constructor(scope: Construct, id: string, props: CustomApiGatewayProps) {
    super(scope, id);

    // Product api gateway
    this.createProductApi(props.productMicroservice);
    // Basket api gateway
    this.createBasketApi(props.basketMicroservice);
    // Ordering api gateway
    this.createOrderApi(props.orderingMicroservices);
  }

  /**
   * Creates the API Gateway for the product microservice.
   *
   * @param productMicroservice - The product microservice function.
   */
  private createProductApi(productMicroservice: IFunction) {
    // Product microservices api gateway
    // root name = /product

    const apigw = new LambdaRestApi(this, "productApi", {
      restApiName: "Product Service",
      handler: productMicroservice,
      proxy: false,
      defaultCorsPreflightOptions: {
        allowOrigins: Cors.ALL_ORIGINS,
        allowMethods: ["GET", "POST", "PUT", "DELETE"],
      },
    });

    const integration = new LambdaIntegration(productMicroservice);

    const bodyValidator = new RequestValidator(this, "BodyValidator", {
      restApi: apigw,
      validateRequestBody: true,
      validateRequestParameters: false,
    });
    // const paramValidator = new RequestValidator(this, "ParamValidator", {
    //   restApi: apigw,
    //   validateRequestBody: false,
    //   validateRequestParameters: true,
    // });

    const model = new Model(this, "ProductModel", {
      restApi: apigw,
      modelName: "ProductModel",
      description: "Product Model",
      schema: {
        type: JsonSchemaType.OBJECT,
        required: ["name", "description", "imageFile", "category", "price"],

        properties: {
          name: { type: JsonSchemaType.STRING },
          description: { type: JsonSchemaType.STRING },
          imageFile: { type: JsonSchemaType.STRING },
          category: { type: JsonSchemaType.STRING },
          price: { type: JsonSchemaType.NUMBER },
        },
      },
    });

    // Path: /product
    const product = apigw.root.addResource("product");

    product.addMethod("GET", integration, {
      operationName: "GET Secure Resource for Product Service",
      apiKeyRequired: true,
    }); // GET /product

    product.addMethod("POST", integration, {
      operationName: "POST Secure Resource for Product Service",
      apiKeyRequired: true,
      requestValidator: bodyValidator,
      requestModels: {
        "application/json": model,
      },
    }); // POST /product

    // Path: /product/{id}
    const singleProduct = product.addResource("{id}"); // product/{id}

    // GET /product/{id}
    // PUT /product/{id}
    // DELETE /product/{id}
    ["GET", "PUT", "DELETE"].map(method => {
      singleProduct.addMethod(method, integration, {
        operationName: `${method} Secure Param Resource for Product Service`,
        apiKeyRequired: true,
      });
    });

    // Create API Usageplan
    const usagePlan = apigw.addUsagePlan("UsagePlan", {
      name: "ProductUsagePlan",
      description: "Product Usage Plan",
      apiStages: [
        {
          api: apigw,
          stage: apigw.deploymentStage,
        },
      ],
    });

    // Create API Key - autogenerated
    const apiKey = apigw.addApiKey("ApiKey", {
      apiKeyName: "ProductApiKey",
      description: "Product Api Key",
    });

    // Attach the API Key to the Usage Plan
    usagePlan.addApiKey(apiKey);

    new CfnOutput(this, "ProductApiKey", {
      value: apiKey.keyId,
    });
  }

  private createBasketApi(basketMicroservice: IFunction) {
    // Basket microservices api gateway
    // root name = basket

    // GET /basket
    // POST /basket

    // // Single basket with userName parameter - resource name = basket/{userName}
    // GET /basket/{userName}
    // DELETE /basket/{userName}

    // checkout basket async flow
    // POST /basket/checkout

    const apigw = new LambdaRestApi(this, "basketApi", {
      restApiName: "Basket Service",
      handler: basketMicroservice,
      proxy: false,
    });

    const basket = apigw.root.addResource("basket");
    basket.addMethod("GET"); // GET /basket
    basket.addMethod("POST"); // POST /basket

    const singleBasket = basket.addResource("{userName}");
    singleBasket.addMethod("GET"); // GET /basket/{userName}
    singleBasket.addMethod("DELETE"); // DELETE /basket/{userName}

    const basketCheckout = basket.addResource("checkout");
    basketCheckout.addMethod("POST"); // POST /basket/checkout
    // expected request payload : { userName : Custom }
  }

  private createOrderApi(orderingMicroservices: IFunction) {
    // Ordering microservices api gateway
    // root name = order

    // GET /order
    // GET /order/{userName}
    // expected request : xxx/order/Custom?orderDate=timestamp
    // ordering ms grap input and query parameters and filter to dynamo db

    const apigw = new LambdaRestApi(this, "orderApi", {
      restApiName: "Order Service",
      handler: orderingMicroservices,
      proxy: false,
    });

    const order = apigw.root.addResource("order");
    order.addMethod("GET"); // GET /order

    const singleOrder = order.addResource("{userName}");
    singleOrder.addMethod("GET"); // GET /order/{userName}
    // expected request : xxx/order/Custom?orderDate=timestamp
    // ordering ms grap input and query parameters and filter to dynamo db

    return singleOrder;
  }
}
